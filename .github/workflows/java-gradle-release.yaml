name: Java Gradle Release
# Reusable workflow for releasing Java Gradle projects

on:
  workflow_call:
    inputs:
      release-type:
        description: "Scope of the release (major, minor or patch)."
        required: true
        type: string
      java-distribution:
        description: "Java distribution to be installed. (Default is microsoft)"
        required: false
        type: string
        default: "microsoft"
      java-version:
        description: "Java version to be installed. (Default is 11)"
        required: false
        type: string
        default: "11"
      gradle-version:
        description: "Gradle version to be installed. (Default is wrapper)"
        required: false
        type: string
        default: "wrapper"
      working-directory:
        description: "Working directory of your Gradle artifacts. (Default is .)"
        required: false
        type: string
        default: "."
    secrets:
      github-username:
        description: "GitHub username for committing the changes."
        required: true
      github-email:
        description: "GitHub email for committing the changes."
        required: true
      github-token:
        description: "GitHub token for committing the changes."
        required: true

    # Map the workflow outputs to job outputs
    outputs:
      release-version:
        description: "The release version."
        value: ${{ jobs.release.outputs.release-version }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-22.04

    # Map the job outputs to step outputs
    outputs:
      release-version: ${{ steps.evaluate-version.outputs.release-version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Setup git
        run: |
          git config user.email ${{ secrets.github-email }}
          git config user.name ${{ secrets.github-username }}
        shell: bash

      - name: Setup semver
        run: |
          wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.3.0/src/semver
          chmod +x /usr/local/bin/semver

      - name: Bump version
        id: evaluate-version
        run: |
          old_version=$(grep "version=" gradle.properties | cut -d "=" -f2)
          if [[ "${{ github.event.inputs.release-type }}" == "patch" ]]; then
              release_version="${old_version%-*}"
          else
              release_version=$(semver bump "${{ github.event.inputs.release-type }}" "${old_version}")
          fi
          echo "release-version=$release_version" >> $GITHUB_OUTPUT

      - name: Set up Gradle with version ${{ inputs.gradle-version }}
        uses: bakdata/ci-templates/actions/java-gradle-setup@v1.4.0
        with:
          java-distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}
          gradle-version: ${{ inputs.gradle-version }}

      - name: Generate changelog
        run: ./gradlew -Pchangelog.releaseVersion=${{ steps.evaluate-version.outputs.release-version }} --stacktrace --info generateChangelog
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        env:
          GITHUB_USER: ${{ secrets.github-username }}
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Commit and push
        run: |
          git add CHANGELOG.md
          git commit -m "Changelog for version ${{ steps.evaluate-version.outputs.release-version }}"
          git push
        shell: bash

      - name: Create release
        run: ./gradlew -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=${{ steps.evaluate-version.outputs.release-version }} --stacktrace --info release -x test
        shell: bash
        working-directory: ${{ inputs.working-directory }}
