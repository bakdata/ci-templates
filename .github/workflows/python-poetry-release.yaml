name: Reusable workflow for building and releasing Python packages

on:
  workflow_call:
    inputs:
      release-type:
        description: "Scope of the release; See: https://python-poetry.org/docs/cli/#version"
        required: true
        type: string
      ref:
        description: "The ref name to checkout the repository."
        required: false
        default: ${{ github.event.repository.default_branch }}
        type: string
      python-version:
        description: "The Python version for setting up Poetry. (Default is 3.10)"
        required: false
        default: "3.10"
        type: string
      poetry-version:
        description: "The Poetry version to be installed. (Default is 1.5.1)"
        required: false
        default: "1.5.1"
        type: string
      working-directory:
        description: "The working directory of your Python package. (Default is root directory)"
        required: false
        default: "./"
        type: string
      changelog:
        description: "Create changelog for release."
        required: false
        default: false
        type: boolean
      changelog-config:
        description: "Changelog config path."
        required: false
        type: string
    secrets:
      github-username:
        description: "The GitHub username for committing the changes."
        required: true
      github-email:
        description: "The GitHub email for committing the changes."
        required: true
      github-token:
        description: "The GitHub token for committing the changes."
        required: true

    # Map the workflow outputs to job outputs
    outputs:
      release-version:
        description: "The bumped version of the package."
        value: ${{ jobs.create-release.outputs.release-version }}
      old-version:
        description: "The old version of the package."
        value: ${{ jobs.create-release.outputs.old-version }}

jobs:
  create-release:
    runs-on: ubuntu-22.04
    # Map the job outputs to step outputs
    outputs:
      release-version: ${{ steps.bump-version.outputs.release-version }}
      old-version: ${{ steps.bump-version.outputs.old-version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false # required for pushing to protected branch later
          fetch-depth: 0 # required to build the changelog

      - name: Bump version with Poetry
        id: bump-version
        uses: bakdata/ci-templates/actions/python-poetry-bump-version@v1.21.0
        with:
          release-type: ${{ inputs.release-type }}
          python-version: ${{ inputs.python-version }}
          poetry-version: ${{ inputs.poetry-version }}
          working-directory: ${{ inputs.working-directory }}

      - name: Create changelog
        id: build-changelog
        uses: bakdata/ci-templates/actions/changelog-generate@v1.21.1
        if: ${{ inputs.changelog == 'true'}}
        with:
          github-token: ${{ secrets.github-token }}
          config: ${{ inputs.changelog-config }}
          new-tag: ${{ steps.bump-version.outputs.release-version }}
          fetch-reviewers: "true"
          fetch-release-information: "true"

      - name: Commit and push pyproject.toml file
        uses: bakdata/ci-templates/actions/commit-and-push@v1.0.0
        with:
          ref: ${{ inputs.ref }}
          commit-message: "Bump version ${{ steps.bump-version.outputs.old-version }} â†’ ${{ steps.bump-version.outputs.release-version }}"
          github-username: ${{ secrets.github-username }}s
          github-email: ${{ secrets.github-email }}
          github-token: ${{ secrets.github-token }}

      - name: Tag and release
        uses: bakdata/ci-templates/actions/tag-and-release@feature/split_actions
        with:
          tag: "${{ steps.bump-version.outputs.release-version }}"
          release-title: "${{ steps.bump-version.outputs.release-version }}"
          release-body: "${{ steps.build-changelog.outputs.single-changelog }}"
          github-username: ${{ secrets.github-username }}
          github-email: ${{ secrets.github-email }}
          github-token: ${{ secrets.github-token }}
