name: "Generate changelog"
description: "Generate changelog after release"
inputs:
  # required inputs
  github-token:
    description: "The GitHub token for committing the changes."
    required: true
  new-tag:
    description: Version after bump
    required: true

  # unrequired inputs
  changelog-file:
    description: Path to the Changelog.md file in the github repository
    required: false
    default: "CHANGELOG.md"
  commitMode:
    description: "Special configuration for projects which work without PRs."
    required: false
    default: "false"
  config:
    description: Path to the changelog config JSON file
    required: false
    default: "./.github/changelog-config.json"
  fetchReleaseInformation:
    description: "Will enable fetching additional release information from tags."
    required: false
    default: "false"
  fetchReviewers:
    description: "Will enable fetching the users/reviewers who approved the PR"
    required: false
    default: "false"
  old-tag:
    description: Previous version. Let empty for releases
    required: false
    default: ""
  output:
    description: "Name of the output file for the generate changelog step"
    required: false
    default: "changes.md"
outputs:
  merged-changelog:
    description: "Changelog containing listing of all single changelogs"
    value: ${{ steps.output-generator.outputs.merged-changelog }}
  single-changelog:
    description: "Changelog containing changes of the latest tag"
    value: ${{ steps.output-generator.outputs.single-changelog }}
runs:
  using: "composite"
  steps:
    - name: "Set tags"
      id: setTags
      run: |
        tag_list=$(git describe --tags) || tag_list=""

        # to-tag
        if [[ "$tag_list" == *"${{ inputs.new-tag }}"* ]]; then
          echo  "totag=${{ inputs.new-tag }}">> $GITHUB_OUTPUT
        else
          latest_commit=`git rev-parse HEAD`
          echo  "totag=$latest_commit">> $GITHUB_OUTPUT 
        fi

        #from-tag
        setfrom=""

        if [[ -n "${{ inputs.old-tag }}" ]] && [[ "$tag_list" == *"${{ inputs.old-tag }}"* ]]; then
        # tag provided & provided tag exists
            setfrom=${{ inputs.old-tag }}
        else
        # no tag provided or a non-existing tag was provided 
          if [ -n "$tag_list" ]; then 
            # if any tag exists then set from-tag to the latest tag
            setfrom=$(git describe --tags `git rev-list --tags --max-count=1`)
          else
            # if no tag exists then use the frist commit as fromtag
            setfrom=$(git rev-list --max-parents=0 HEAD)
          fi
        fi
        echo  "fromtag=$setfrom">> $GITHUB_OUTPUT
      shell: bash

    - name: "Create changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3.7.0
      with:
        token: "${{ inputs.github-token }}"
        configuration: "${{ inputs.config }}"
        fromTag: "${{ steps.setTags.outputs.fromtag }}"
        toTag: "${{ steps.setTags.outputs.totag }}"
        outputFile: "${{ inputs.output }}"
        fetchReviewers: "${{ inputs.fetchReviewers }}"
        fetchReleaseInformation: "${{ inputs.fetchReleaseInformation }}"
        commitMode: "${{ inputs.commitMode }}"

    - name: Replace default branch with new Tag
      if: ${{ steps.setTags.outputs.totag != inputs.new-tag }}
      run: |
        # Replace default branch with new tag
        sed -i 's/\[${{ steps.setTags.outputs.totag }}\]/\[${{ inputs.new-tag }}\]/g' ${{ inputs.output }}
        sed -i 's|releases/tag/${{ steps.setTags.outputs.totag }}|releases/tag/${{ inputs.new-tag }}|g' ${{ inputs.output }}

        # Set Release date
        tag_date=$(date '+%Y-%m-%d')
        sed -i "s/Release Date: /Release Date: \[${tag_date}\]/g" ${{ inputs.output }}
      shell: bash

    - name: Update github Changelog
      id: output-generator
      env:
        tmp_changelog: tmp_changelog.md
      run: |
        # Reformat changes.md and add it to the existing changelog
        echo 'single-changelog<<EOF' >> $GITHUB_OUTPUT
        cat ${{ inputs.output }} >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

        # Create changelog.md in case of a first Release
        if [ -n "${{ inputs.changelog-file }}" ]; then
          sed -i 's/# /## /g' ${{ inputs.output }}
          echo -e "\n" >> ${{ inputs.output }} 
          if [ ! -f "${{ inputs.changelog-file }}" ]; then
            echo $'# Changelog\n' >> ${{ inputs.changelog-file }}
            # echo $'# Changelog\n' >> ${{ env.tmp_changelog }}
          fi
          # else
          #   cat ${{ inputs.changelog-file }} > ${{ env.tmp_changelog }}
          
          # Update global changelog and pass it to the ouput
          sed -i "2i $(sed ':a;N;$!ba;s/\n/\\n/g' ${{ inputs.output }})" ${{ inputs.changelog-file }}
          # sed -i "2i $(sed ':a;N;$!ba;s/\n/\\n/g' ${{ inputs.output }})" ${{ env.tmp_changelog }}

          # cat ${{ env.tmp_changelog }} >> $GITHUB_OUTPUT
          echo 'merged-changelog<<EOF' >> $GITHUB_OUTPUT
          cat ${{ inputs.changelog-file }} >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          rm ${{ inputs.output }} 
          # ${{ env.tmp_changelog }}
        fi
      shell: bash
