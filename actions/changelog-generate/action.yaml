name: "Generate changelog"
description: "Generate changelog after release"
inputs:
  # required inputs
  changelog-file:
    description: Path to the Changelog.md file
    required: true
  github-token:
    description: "The GitHub token for committing the changes."
    required: true
  new-tag:
    description: Version after bump
    required: true
  old-tag:
    description: Previous version. Let empty for releases
    required: false
    default: ""
  # unrequired inputs
  config:
    description: Path to the changelog config JSON file
    required: false
    default: "./.github/changelog-config.json"
  output:
    description: "Name of the output file for the generate changelog step"
    required: false
    default: "changes.md"
  fetchReviewers:
    description: "Will enable fetching the users/reviewers who approved the PR"
    required: false
    default: "false"
  fetchReleaseInformation:
    description: "Will enable fetching additional release information from tags."
    required: false
    default: "false"
  commitMode:
    description: "Special configuration for projects which work without PRs."
    required: false
    default: "false"
outputs:
  single-changelog:
    description: "Changelog containing changes of the latest tag"
    value: ${{ steps.output-generator.outputs.single-changelog }}
  merged-changelog:
    description: "Changelog containing listing of all single changelogs"
    value: ${{ steps.output-generator.outputs.merged-changelog }}
runs:
  using: "composite"
  steps:
    - name: "Set tags"
      id: setTags
      run: |
        if [ $(git tag -l "${{ inputs.new-tag }}") ]; then
          echo "totag=${{ inputs.new-tag }}">> $GITHUB_OUTPUT
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo "Totag: $totag already exists"
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          var="true" 
          echo "to-exists=$var">> $GITHUB_OUTPUT 
        else
          var="false" 
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo "totag: $totag did not exist"
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo "totag=${{ github.event.repository.default_branch }}">> $GITHUB_OUTPUT 
          echo "to-exists=$var">> $GITHUB_OUTPUT 
        fi

        # set fromtag to first commit if not fromtag was specified
        if [ ! -n "${{ inputs.old-tag }}" ]; then
          first_commit=`git log --oneline | tail -1 | awk '{print $1}'`
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo "fromtag: $fromtag was empty"
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo  "fromtag=$first_commit">> $GITHUB_OUTPUT
        else
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo "fromtag: ${{ inputs.old-tag }} was provided"
          echo "+++++++++++++++++++++++++++"
          echo "+++++++++++++++++++++++++++"
          echo  "fromtag=${{ inputs.old-tag }}">> $GITHUB_OUTPUT 
        fi

      shell: bash

    - name: "Create changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3.7.0
      with:
        token: "${{ inputs.github-token }}"
        configuration: "${{ inputs.config }}"
        fromTag: "${{steps.setTags.outputs.fromtag}}"
        toTag: "${{steps.setTags.outputs.totag}}"
        outputFile: "${{ inputs.output }}"
        fetchReviewers: "${{ inputs.fetchReviewers }}"
        fetchReleaseInformation: "${{ inputs.fetchReleaseInformation }}"
        commitMode: "${{ inputs.commitMode }}"

    - name: Replace default branch with new Tag
      if: ${{ steps.setTags.outputs.to-exists == 'false' }}
      run: |
        # Replace default branch with new tag
        sed -i 's/\[${{steps.setTags.outputs.totag}}\]/\[${{ inputs.new-tag }}\]/g' ${{ inputs.output }}
        sed -i 's|releases/tag/${{steps.setTags.outputs.totag}}|releases/tag/${{ inputs.new-tag }}|g' ${{ inputs.output }}

        #Set Release date
        tag_date=$(date '+%Y-%m-%d') 
        sed -i "s/Release Date: /Release Date: \[${tag_date}\]/g" ${{ inputs.output }}
      shell: bash

    - name: Update github Changelog
      id: output-generator
      run: |
        # Reformat changes.md and add it to the existing changelog
        echo 'single-changelog<<EOF' >> $GITHUB_OUTPUT
        echo "$(cat ${{ inputs.output }})" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        sed -i 's/# /## /g' ${{ inputs.output }}

        # Create changelog.md in case of a first Release
        if [ ! -f "${{ inputs.gh-changelog }}" ]; then
            touch ${{ inputs.gh-changelog }}
            echo "# Changelog \n" >> ${{ inputs.gh-changelog }}
        fi

        # Update global changelog and pass it to the ouput
        sed -i '/# Changelog/ r ${{ inputs.output }}' ${{ inputs.gh-changelog }}
        echo 'merged-changelog<<EOF' >> $GITHUB_OUTPUT
        echo "$(cat ${{ inputs.gh-changelog }})" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
      shell: bash
