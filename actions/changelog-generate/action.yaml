name: "Generate changelog"
description: "Generate changelog after release"
inputs:
  # required inputs
  changelog-file:
    description: Path to the Changelog.md file
    required: true
  github-token:
    description: "The GitHub token for committing the changes."
    required: true
  new-tag:
    description: Version after bump
    required: true
  old-tag:
    description: Previous version
    required: true
  # unrequired inputs
  config:
    description: Path to the changelog config JSON file
    required: false
    default: "./.github/changelog-config.json"
  output:
    description: "Name of the output file for the generate changelog step"
    required: false
    default: "changes.md"
  fetchReviewers:
    description: "Will enable fetching the users/reviewers who approved the PR"
    required: false
    default: "false"
  fetchReleaseInformation:
    description: "Will enable fetching additional release information from tags."
    required: false
    default: "false"
  commitMode:
    description: "Special configuration for projects which work without PRs."
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - uses: mukunku/tag-exists-action@v1.2.0
      id: checkTag
      with: 
        tag: "${{ inputs.new-tag }}"
    - name: "Set tag"
      id: setTag
      run: |
        if [[ "${{ steps.checkTag.outputs.exists }}" == "true" ]]; then
            echo  "totag=${{ inputs.new-tag }}">> $GITHUB_OUTPUT 
        else 
            echo  "totag=${{ github.event.repository.default_branch }}">> $GITHUB_OUTPUT 
        fi
      shell: bash
    - name: "Create changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3.7.0
      with:
        token: "${{ inputs.github-token }}"
        configuration: "${{ inputs.config }}"
        fromTag: "${{ inputs.old-tag }}"
        toTag: "${{steps.setTag.outputs.totag}}"
        outputFile: "${{ inputs.output }}"
        fetchReviewers: "${{ inputs.fetchReviewers }}"
        fetchReleaseInformation: "${{ inputs.fetchReleaseInformation }}"
        commitMode: "${{ inputs.commitMode }}"
    - name: Replace default branch with new Tag
      if: ${{ steps.checkTag.outputs.exists == 'false' }}
      run: |
        # Replace default branch with new tag
        sed -i 's/\[${{steps.setTag.outputs.totag}}\]/\[${{ inputs.new-tag }}\]/g' ${{ inputs.output }}
        echo "---------------------------"
        cat ${{ inputs.output }}
        echo "---------------------------"
        
        sed -i 's|releases/tag/${{steps.setTag.outputs.totag}}|releases/tag/${{ inputs.new-tag }}|g' ${{ inputs.output }}
        cat ${{ inputs.output }}
        echo "+++++++++++++++++++++++++++++="
        #Update date
        tag_date=$(date '+%Y-%m-%d') 
        echo $tag_date 
      shell: bash
    - name: Update github Changelog
      run: |
        # Reformat changes.md and add it to the existing changelog
        sed -i 's/# /## /g' ${{ inputs.output }}
        echo "---------------------------"
        cat ${{ inputs.output }}
        echo "---------------------------"
        sed -i '/# Changelog/ r ${{ inputs.output }}' ${{ inputs.gh-changelog }}
        cat ${{ inputs.gh-changelog }}
        echo "---------------------------"
      shell: bash
