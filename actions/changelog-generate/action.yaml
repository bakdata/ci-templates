name: "Generate changelog"
description: "Generate changelog after release"
inputs:
  # required inputs
  changelog-file:
    description: Path to the Changelog.md file in the github repository
    required: false
    default: "CHANGELOG.md"
  github-token:
    description: "The GitHub token for committing the changes."
    required: true
  new-tag:
    description: Version after bump
    required: true
  old-tag:
    description: Previous version. Let empty for releases
    required: false
    default: ""

  # unrequired inputs
  config:
    description: Path to the changelog config JSON file
    required: false
    default: "./.github/changelog-config.json"
  output:
    description: "Name of the output file for the generate changelog step"
    required: false
    default: "changes.md"
  fetchReviewers:
    description: "Will enable fetching the users/reviewers who approved the PR"
    required: false
    default: "false"
  fetchReleaseInformation:
    description: "Will enable fetching additional release information from tags."
    required: false
    default: "false"
  commitMode:
    description: "Special configuration for projects which work without PRs."
    required: false
    default: "false"
outputs:
  single-changelog:
    description: "Changelog containing changes of the latest tag"
    value: ${{ steps.output-generator.outputs.single-changelog }}
  merged-changelog:
    description: "Changelog containing listing of all single changelogs"
    value: ${{ steps.output-generator.outputs.merged-changelog }}
runs:
  using: "composite"
  steps:
    # - uses: mukunku/tag-exists-action@v1.2.0
    #   id: checkTag
    #   with:
    #     tag: "${{ inputs.new-tag }}"

    - name: "Set tags"
      id: setTags
      run: |
        { # try
          tag_list=$(git describe --tags)
        } || { # catch
          tag_list=""
        }
        #to-tag
        if [[ "$tag_list" == *"${{ inputs.new-tag }}"* ]]; then
          echo  "totag=${{ inputs.new-tag }}">> $GITHUB_OUTPUT
          echo  "totag_exists=true">> $GITHUB_OUTPUT
        else
          echo  "totag=${{ github.event.repository.default_branch }}">> $GITHUB_OUTPUT 
          echo  "totag_exists=false">> $GITHUB_OUTPUT
        fi


        #from-tag
        setfrom=""
        check_if_first_commit="false"

        if [[ -n "${{ inputs.old-tag }}" ]] && [[ "$tag_list" == *"${{ inputs.old-tag }}"* ]]; then
        # tag provided & provided tag exists
            setfrom=${{ inputs.old-tag }}
        else
        # no tag provided or a non-existing tag was provided 
          if [ -n "$tag_list" ]; then 
            # if any tag exists then set from-tag to the latest tag
            latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
            setfrom=$latest_tag
          else
            # if no tag exists then use the frist commit as fromtag
            first_commit=`git rev-list --max-parents=0 HEAD`
            setfrom=$first_commit
            latest_commit=`git rev-parse HEAD`
            echo  "totag=$latest_commit">> $GITHUB_OUTPUT 
          fi
        fi
        echo  "fromtag=$setfrom">> $GITHUB_OUTPUT
      shell: bash

    - name: "Create changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3.7.0
      with:
        token: "${{ inputs.github-token }}"
        configuration: "${{ inputs.config }}"
        fromTag: "${{steps.setTags.outputs.fromtag}}"
        toTag: "${{steps.setTags.outputs.totag}}"
        outputFile: "${{ inputs.output }}"
        fetchReviewers: "${{ inputs.fetchReviewers }}"
        fetchReleaseInformation: "${{ inputs.fetchReleaseInformation }}"
        commitMode: "${{ inputs.commitMode }}"

    - name: Replace default branch with new Tag
      if: ${{ steps.setTags.outputs.totag_exists == 'false' }}
      run: |
        # Replace default branch with new tag
        sed -i 's/\[${{steps.setTags.outputs.totag}}\]/\[${{ inputs.new-tag }}\]/g' ${{ inputs.output }}
        sed -i 's|releases/tag/${{steps.setTags.outputs.totag}}|releases/tag/${{ inputs.new-tag }}|g' ${{ inputs.output }}

        # Set Release date
        tag_date=$(date '+%Y-%m-%d') 
        sed -i "s/Release Date: /Release Date: \[${tag_date}\]/g" ${{ inputs.output }}
      shell: bash

    - name: Update github Changelog
      id: output-generator
      run: |
        # Reformat changes.md and add it to the existing changelog
        echo -e "\n" >> ${{ inputs.output }} 
        echo 'single-changelog<<EOF' >> $GITHUB_OUTPUT
        echo "$(cat ${{ inputs.output }})" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        sed -i 's/# /## /g' ${{ inputs.output }}
        
        # Create changelog.md in case of a first Release
        if [ -n "${{ inputs.changelog-file }}" ]; then
          if [ ! -f "${{ inputs.changelog-file }}" ]; then
              touch ${{ inputs.changelog-file }}
              echo "# Changelog " >> ./${{ inputs.changelog-file }}
          fi
          # Update global changelog and pass it to the ouput
          # sed -i 's/# Changelog / ${{ inputs.output }}/g' ${{ inputs.changelog-file }}
          sed -i 's/# Changelog / $(cat ${{ inputs.output }})/g' ${{ inputs.changelog-file }}
          echo 'merged-changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$(cat ${{ inputs.changelog-file }})" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        fi
        echo "+++++++++++++++++++++++++++++++++++++++++++"
        cat ${{ inputs.output }}
        echo "+++++++++++++++++++++++++++++++++++++++++++"
        cat ${{ inputs.changelog-file }}
        echo "+++++++++++++++++++++++++++++++++++++++++++"
      shell: bash
