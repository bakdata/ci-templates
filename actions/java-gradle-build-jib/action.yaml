name: "Build Multi-Platform image"
description: "Build Multi-Platform image using Gradle"

outputs:
  image-tag: 
    description: "The tag of the docker image."
    value: ${{ steps.meta.outputs.tag }}

inputs:
  platforms:
    description: "Architectures for the created image (comma separated)"
    required: false
    default: "linux/amd64,linux/arm64"
    type: string
  repository:
    description: "The repository to push the image to"
    required: false
  allow-insecure-registries:
    description: "Whether to allow insecure registries or not. (Default is false)"
    required: false
    default: "false"
  jib-from-image:
    description: "The Jib base image to use"
    required: false
  class:
    description: "The entrypoint class to be used for the image"
    required: false
  java-distribution:
    description: "Java distribution to be installed. (Default is microsoft)"
    required: false
    default: "microsoft"
  java-version:
    description: "Java version to be installed. (Default is 11)"
    required: false
    default: "11"
  gradle-version:
    description: "Gradle version to be installed. (Default is wrapper)"
    required: false
    default: "wrapper"
  gradle-cache:
    description: "Whether Gradle caching is enabled or not. (Default is true)"
    required: false
    default: "true"
  gradle-cache-read-only:
    description: "Whether Gradle caching should be read-only. By default this value is 'false' for workflows on the GitHub default branch and 'true' for workflows on other branches."
    required: false
    default: ${{ github.event.repository != null && github.ref_name != github.event.repository.default_branch }}
  gradle-refresh-dependencies:
    description: "Whether Gradle should refresh dependencies. (Default is false)"
    required: false
    default: "false"
  working-directory:
    description: "Working directory of your Gradle artifacts. (Default is .)"
    required: false
    default: "."
  download-lfs-files:
    description: "Whether the Git checkout action should resolve LFS files or not. (Default is false)"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Check out repository
      uses: bakdata/ci-templates/actions/checkout@1.49.0
      with:
        lfs: ${{ inputs.download-lfs-files }}

    - name: Set up Gradle with version ${{ inputs.gradle-version }}
      uses: bakdata/ci-templates/actions/java-gradle-setup@1.49.0
      with:
        java-distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        gradle-version: ${{ inputs.gradle-version }}
        gradle-cache: ${{ inputs.gradle-cache }}
        gradle-cache-read-only: ${{ inputs.gradle-cache-read-only }}

    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        tags: |
          event=tag,type=semver,pattern={{version}}
          event=pr,type=ref
          event=push,type=raw,value=pipeline-${{ github.run_id }}-git-{{sha}},enable=${{ github.ref_type != 'tag' }}

    - name: Build Docker image
      run: |
         echo ${{ steps.meta.outputs.tags }}
#        ./gradlew jib \
#          --info --stacktrace \
#          -Djib.from.platforms=${{ inputs.platforms }} \
#          ${{ inputs.jib-from-image && format('-Djib.from.image={0}', inputs.jib-from-image) || '' }} \
#          ${{ inputs.class && format('-Djib.container.mainClass={0}', inputs.class) || '' }} \
#          ${{ inputs.repository && format('-DjibImage.repository={0}', inputs.repository) || '' }} \
#          -DjibImage.tags=${{ steps.meta.outputs.tags }} \
#          ${{ inputs.gradle-refresh-dependencies == 'true' && '--refresh-dependencies' || '' }} \
#          ${{ inputs.allow-insecure-registries == 'true' && '-Djib.allowInsecureRegistries=true' || '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
