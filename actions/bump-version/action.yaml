name: "Bump version"
description: "Bump version with python bump2version using .bumpversion.cfg"

inputs:
  release-type:
    description: "The type of the release (major, minor or patch)."
    required: true
  working-directory:
    description: "The directory containing the `.bumpversion.cfg` file."
    required: false
    default: "."
  new-version:
    description: ""
    required: false
    default: ""

outputs:
  release-version:
    description: "The bumped version."
    value: ${{ steps.bump-version.outputs.new-version }}
  old-tag:
    description: "The old version"
    value: ${{ steps.bump-version.outputs.old-version }}

runs:
  using: "composite"
  steps:
    - name: Set up bump2version
      run: |
        pipx install bump2version
      shell: bash

    - name: Bump version
      id: bump-version
      run: |
        parameters=(--no-commit ${{ inputs.release-type }})
        echo "old-version=$(python -c "from configparser import ConfigParser; cfg = ConfigParser(); cfg.read('.bumpversion.cfg'); print(cfg['bumpversion']['current_version'])")" >> "$GITHUB_OUTPUT"
        if [ -n "${{ inputs.new-version }}" ]; then
          parameters+=(--new-version ${{ inputs.new-version }})
        fi
        bump2version "${parameters[@]}"
        echo "new-version=$(python -c "from configparser import ConfigParser; cfg = ConfigParser(); cfg.read('.bumpversion.cfg'); print(cfg['bumpversion']['current_version'])")" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
