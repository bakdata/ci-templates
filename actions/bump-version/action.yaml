name: "Bump version"
description: "Bump version with python bump2version using .bumpversion.cfg"

inputs:
  release-type:
    description: "The type of the release (major, minor or patch)."
    required: true
  working-directory:
    description: "The directory containing the `.bumpversion.cfg` file."
    required: false
    default: "."
  new-version:
    description: ""
    required: false
    default: ""

outputs:
  release-tag:
    description: "The bumped version."
    value: ${{ steps.release-tag.outputs.newTag }}
  old-tag:
    description: "The old version"
    value: ${{ steps.release-tag.outputs.oldTag }}

runs:
  using: "composite"
  steps:
    - name: Set up bump2version
      run: pip install --upgrade bump2version
      shell: bash

    - name: Bump version
      id: release-tag
      run: |
        parameters=(--no-commit )
        version=${{ inputs.new-version }}
        echo "?????????????????????????????????????????"
        echo $version
        echo "?????????????????????????????????????????"
        echo "oldTag=$(python -c "from configparser import ConfigParser; cfg = ConfigParser(); cfg.read('.bumpversion.cfg'); print(cfg['bumpversion']['current_version'])")" >> "$GITHUB_OUTPUT"
        if [ -n "$version" ]; then 
          # parameters+=(patch)
          parameters+=(--new-version $version)
        fi
        echo "bump2version ${{ inputs.release-type }} ${parameters[@]}"
        # bump2version ${{ inputs.release-type }} "${parameters[@]}"
        bump2version "${parameters[@]}"
        # bump2version patch --no-commit --new-version 4.8.4

        echo "newTag=$(python -c "from configparser import ConfigParser; cfg = ConfigParser(); cfg.read('.bumpversion.cfg'); print(cfg['bumpversion']['current_version'])")" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
