name: "Bump version"
description: "Bump version with python bump2version using .bumpversion.cfg"

inputs:
  release-type:
    description: "The type of the release (major, minor or patch)."
    required: true
  working-directory:
    description: "The directory containing the `.bumpversion.cfg` file."
    required: false
    default: "."
  new-version:
    description: ""
    required: false
    default: ""

outputs:
  release-version:
    description: "The bumped version of your project."
    value: ${{ steps.bump-version.outputs.new-version }}
  old-version:
    description: "The old version in your `.bumpversion.cfg` file."
    value: ${{ steps.bump-version.outputs.old-version }}

runs:
  using: "composite"
  steps:
    - name: Set up bump2version
      run: |
        pipx install bump2version
      shell: bash

    - name: Bump version
      id: bump-version
      run: |
        parameters=(--no-commit --allow-dirty --no-tag ${{ inputs.release-type }})
        test=(${{ inputs.release-type }})
        echo "old-version=$(python -c "from configparser import ConfigParser; cfg = ConfigParser(); cfg.read('.bumpversion.cfg'); print(cfg['bumpversion']['current_version'])")" >> "$GITHUB_OUTPUT"
        if [[ $test == patch ]]; then
          parameters+=(--new-version ${{ inputs.new-version }})
          bump2version --allow-dirty release
        else
          bump2version --allow-dirty "${parameters[@]}"
          bump2version --allow-dirty release
        fi
        echo "new-version=$(python -c "from configparser import ConfigParser; cfg = ConfigParser(); cfg.read('.bumpversion.cfg'); print(cfg['bumpversion']['current_version'])")" >> "$GITHUB_OUTPUT"
      # We use the case for release-type "patch", because if we do not we get inproper results. For example : 0.0.1-snapshot -> 0.0.3
      # If release-type == patch , we use "bump2version release". This command basically removes the suffix. For example :  0.0.1-snapshot -> 0.0.1
      # In the other case we bump the version (major or minor), then we remove the snapshot suffix
      shell: bash
      working-directory: ${{ inputs.working-directory }}
