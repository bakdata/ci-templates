name: "Deploy helm chart"
description: "Deploy a helm chart to the GKE cluster"
inputs:
  release-name:
    description: "Helm release name"
    required: true
  namespace:
    description: "K8s namespace to deploy in"
    required: true
  chart:
    description: "Helm chart to deploy"
    required: true
  values-yaml:
    description: "File path as string for a single helm value file or as json array for multiple helm value files"
    required: true
  chart-version:
    description: "Chart Version"
    required: false
  post-renderer:
    description: "File path as string for a Helm post renderer"
    required: false
  timeout:
    description: "Timeout for the Helm command in seconds"
    default: "1200"
    required: false
  repository-name:
    description: "Helm repository name"
    required: false
  repository-url:
    description: "Url of the repository"
    required: false
runs:
  using: "composite"
  steps:
    - name: Add helm repository
      shell: bash
      run: |
        if [ -n "$REPOSITORY_NAME" ] && [ -n "$REPOSITORY_URL" ]; then
          helm repo add "$REPOSITORY_NAME" "$REPOSITORY_URL"
          helm repo update
        else
          echo "No repository specified; Skipping step"
        fi
      env:
        REPOSITORY_NAME: ${{ inputs.repository-name }}
        REPOSITORY_URL: ${{ inputs.repository-url }}

    - name: Deploy helm chart
      shell: bash
      run: |
        command="helm upgrade ${{ inputs.release-name }} ${{ inputs.chart }} --debug --install --wait --timeout ${{ inputs.timeout }}s --force --namespace ${{ inputs.namespace }}"

        if $(echo '${{ inputs.values-yaml }}' | jq -e > /dev/null 2>&1); then
          echo "Deploying with multiple value files"
          values=$(echo '${{ inputs.values-yaml }}' | jq -r '[ .[] | . = "--values \(.)"] | join(" ")')
          command="${command} ${values}"
        else
          echo "Deploying with single value file"          
          command="${command} --values ${{ inputs.values-yaml }}"
        fi

        if [ -n "${{ inputs.chart-version }}" ]; then command="${command} --version ${{ inputs.chart-version }}"; fi
        if [ -n "${{ inputs.post-renderer }}" ]; then command="${command} --post-renderer ${{ inputs.post-renderer }}"; fi

        echo "Deploying with command: ${command}"
        eval "$command"
