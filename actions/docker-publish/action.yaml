name: "Publish Docker image"
description: "Publish Docker image artifact to any host"

inputs:
  docker-registry:
    description: "Host where the image should be pushed to."
    required: false
    default: ""
  image-namespace:
    description: "Namespace of Docker image."
    required: false
    default: ""
  image-name:
    description: "Name of Docker image."
    required: false
    default: "${{ github.event.repository.name }}"
  image-tag:
    description: "Tag of Docker image."
    required: false
    default: "pipeline-${{ github.run_id }}-git-${GITHUB_SHA::8}"
  image-artifact-name:
    description: "Optionally upload an image.tar file as a GitHub artifact by setting an artifact name, see https://github.com/actions/upload-artifact (Default is empty, so not uploading)."
    required: false
    default: ""
  working-directory:
    description: "Working directory for your Docker artifacts."
    required: false
    default: "."
runs:
  using: "composite"
  steps:
    - name: Download image artifact
      if: ${{ inputs.image-artifact-name != '' }}
      uses: actions/download-artifact@v3
      with:
        name: "${{ inputs.image-artifact-name }}"
        path: "${{ runner.temp }}/docker-build"

    - name: Load image
      if: ${{ inputs.image-artifact-name != '' }}
      run: |
        if [[ $(ls -1 "${{ runner.temp }}/docker-build/*.tar" 2>/dev/null | wc -l) != 1 ]]; then
          >&2 echo "Error: No tar file found in image artifact."
          exit 1
        fi

        docker load --input ${{ runner.temp }}/docker-build/*.tar
      shell: bash
      working-directory: "${{ inputs.working-directory }}"

    - name: Publish image
      run: |
        fullImageName="${{ inputs.image-name }}"
        if [[ -n "${{ inputs.image-namespace }}" ]]; then
          fullImageName="${{ inputs.image-namespace }}/${fullImageName}"
        fi
        if [[ -n "${{ inputs.docker-registry }}" ]]; then
          fullImageName="${{ inputs.docker-registry }}/${fullImageName}"
        fi

        if [[ "$GITHUB_REF" =~ ^refs/tags/.* ]]; then
          docker tag "${{ inputs.image-name }}" "${fullImageName}:latest"
          docker tag "${{ inputs.image-name }}" "${fullImageName}:${GITHUB_REF/refs\/tags\//}"
          docker push "${fullImageName}:latest"
          docker push "${fullImageName}:${GITHUB_REF/refs\/tags\//}"
        else
          docker tag "${{ inputs.image-name }}" ${fullImageName}:${{ inputs.image-tag }}
          docker push "${fullImageName}:${{ inputs.image-tag }}"
        fi
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
