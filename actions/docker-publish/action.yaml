name: "Publish Docker image"
description: "Publish Docker image from download artifact to any host"

inputs:
  password:
    description: "Password for the Docker registry login."
    required: true
  publisher:
    description: "Publisher to prefix Docker image (e.g. 'my-publisher')."
    required: true
  username:
    description: "Username for the Docker registry login."
    required: true
  docker-registry:
    description: "Host where the image should be pushed to."
    required: false
    default: ""
  image-artifact-name:
    description: "Name of the artifact that contains the Docker image.tar file to push, see https://github.com/actions/upload-artifact (Default is 'image-artifact')."
    required: false
    default: "image-artifact"
  image-name:
    description: "Name of Docker image (Default is the repository name)."
    required: false
    default: "${{ github.event.repository.name }}"
  working-directory:
    description: "Working directory for your Docker artifacts. (Default is .)"
    required: false
    default: "."
runs:
  using: "composite"
  steps:
    - name: Download Docker image tar artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.image-artifact-name }}
        path: build

    # setup-buildx action will create and boot a builder using by default the docker-container driver.
    # This is not required but recommended using it to be able to build multi-platform images, export cache, etc.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.2.1

    - name: Login to the Registry
      uses: "docker/login-action@v2.1.0"
      with:
        registry: "${{ inputs.docker-registry }}"
        username: "${{ inputs.username }}"
        password: "${{ inputs.password }}"

    - name: Publish image
      run: |
        docker_reg=""
        pub="${{ inputs.publisher }}"
        img_name="${{ inputs.image-name }}"
        if [ -n "${{ inputs.docker-registry }}" ]; then 
          docker_reg="${{ inputs.docker-registry }}/"
        fi
        reg_pub_name="${docker_reg}${pub}/${img_name}"
        # reg_pub_name="${docker_reg}${{ inputs.publisher }}/${{ inputs.image-name }}"

        if [[ $(ls -1 build/*.tar 2>/dev/null | wc -l) != 1 ]]; then
          >&2 echo "Error: A single image tar file is needed in the downloaded artifact. You can upload one before using this action: https://github.com/actions/upload-artifact."
          exit 1
        fi
        docker load --input build/*.tar
        if [[ "$GITHUB_REF" =~ ^refs/tags/.* ]]; then
          docker tag ${{ inputs.image-name }}:${{ github.run_id }} $reg_pub_name:latest
          docker tag ${{ inputs.image-name }}:${{ github.run_id }} $reg_pub_name:${GITHUB_REF/refs\/tags\//}
          docker push $reg_pub_name:latest
          docker push $reg_pub_name:${GITHUB_REF/refs\/tags\//}
        else
          docker tag ${{ inputs.image-name }}:${{ github.run_id }} $reg_pub_name:${{ github.run_id }}
          docker push $reg_pub_name:${{ github.run_id }}
        fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}
