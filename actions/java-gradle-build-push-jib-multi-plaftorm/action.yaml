name: "Build Multi-Platrofm image"
description: "Build Multi-Platrofm image using Gradle"

inputs:
  additional-tags:
    description: "Additional tags to be pushed to the registry. Comma seperated list."
    required: false
  registry-username:
    description: "Username of registry."
    required: false
  registry-password:
    description: "Password of registry."
    required: false
  full-image-name:
    description: "Full name of image (registry/image:tag) If an image name is provided without a tag, 'latest' will be used. Be careful with registries that dont allow overwriting tags."
    required: true
  jib-from-image:
    description: "The Jib base image to use"
    required: false
  class:
    description: "The entrypoint class to be used for the image"
    required: false
  java-distribution:
    description: "Java distribution to be installed. (Default is temurin)"
    required: false
    default: "temurin"
  java-version:
    description: "Java version to be installed. (Default is 11)"
    required: false
    default: "11"
  gradle-version:
    description: "Gradle version to be installed. (Default is wrapper)"
    required: false
    default: "wrapper"
  gradle-cache:
    description: "Whether Gradle caching is enabled or not. (Default is true)"
    required: false
    default: "true"
  gradle-cache-read-only:
    description: "Whether Gradle caching should be read-only. By default this value is 'false' for workflows on the GitHub default branch and 'true' for workflows on other branches."
    required: false
    default: ${{ github.event.repository != null && github.ref_name != github.event.repository.default_branch }}
  gradle-refresh-dependencies:
    description: "Whether Gradle should refresh dependencies. (Default is false)"
    required: false
    default: "false"
  working-directory:
    description: "Working directory of your Gradle artifacts. (Default is .)"
    required: false
    default: "."
  download-lfs-files:
    description: "Whether the Git checkout action should resolve LFS files or not. (Default is false)"
    required: false
    default: "false"
  subproject:
    description: "The Gradle subproject for which the tarball image should be built (If not specified, a tarball image for the root project will be built)"
    required: false
runs:
  using: "composite"
  steps:
    - name: Check out repository
      uses: bakdata/ci-templates/actions/checkout@1.32.0
      with:
        lfs: ${{ inputs.download-lfs-files }}

    - name: Set up Gradle with version ${{ inputs.gradle-version }}
      uses: bakdata/ci-templates/actions/java-gradle-setup@d53c20d6d45f3000725a9bcc222f39d93cb0b5b9
      with:
        java-distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        gradle-version: ${{ inputs.gradle-version }}
        gradle-cache: ${{ inputs.gradle-cache }}
        gradle-cache-read-only: ${{ inputs.gradle-cache-read-only }}

    - name: Process inputs
      id: process-inputs
      run: |
        # Extract the image name from the full image name
        echo "IMAGE_NAME=$(echo "${{ inputs.full-image-name }}" | cut -d ':' -f 1)" >> "$GITHUB_OUTPUT"
        IFS=',' read -r -a tags <<< "${{ inputs.additional-tags }}"
        echo "IMAGE_TAGS<<EOF" >> "$GITHUB_OUTPUT"
        for element in "${tags[@]}"
        do
            echo "type=raw,$element" >> $GITHUB_OUTPUT
        done
        echo "EOF" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.process-inputs.outputs.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          ${{ steps.process-inputs.outputs.IMAGE_TAGS }}

    - name: Build Docker image
      run: |
        ./gradlew ${{ inputs.subproject && format('{0}:', inputs.subproject) || '' }} jib \
          --info --stacktrace \
          --image=${{github.repository}}_${{ github.run_id }}_${{github.run_number}} \
          -Djib.from.platforms=linux/arm64,linux/amd64 \
          ${{ inputs.jib-from-image && format('-Djib.from.image={0}', inputs.jib-from-image) || '' }} \
          ${{ inputs.class && format('-Djib.container.mainClass={0}', inputs.class) || '' }} \
          -DsendCredentialsOverHttp \
          -Djib.allowInsecureRegistries=true \
          -Djib.to.image=${{ inputs.full-image-name }} \
          -Djib.to.tags=$(echo "${{ steps.meta.outputs.tags }}" | sed -zr 's/.*:(.*\n)/\1/gm; s/\n/,/g;  s/(.*),/\1\n/g') \
          ${{ inputs.registry-username && format('-Djib.to.auth.username={0}', inputs.registry-username) || '' }} \
          ${{ inputs.registry-password && format('-Djib.to.auth.password={0}', inputs.registry-password) || '' }} \
          ${{ inputs.gradle-refresh-dependencies == 'true' && '--refresh-dependencies' || '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
