name: "Publish Java artifacts"
description: "Publish Java artifacts using gradle"

inputs:
  signing-secret-key-ring:
    description: "Key ring file for signing the sonatype publication."
    required: true
  signing-key-id:
    description: "Key id for signing the sonatype publication."
    required: true
  signing-password:
    description: "Password for signing the sonatype publication."
    required: true
  ossrh-username:
    description: "Username for signing into sonatype repository."
    required: true
  ossrh-password:
    description: "Password for signing into sonatype repository."
    required: true
  docker-username:
    description: "Username for docker authentication."
    required: false
  docker-password:
    description: "Password for docker authentication."
    required: false
  docker-publisher:
    description: "Publisher to prefix docker image."
    required: false
  docker-image-artifact-name:
    descritption: "Artifact name to download previously uploaded jib docker image (see https://github.com/actions/upload-artifact and https://github.com/actions/download-artifact)"
    required: false
    default: "docker-image"
  working-directory:
    description: "The working directory of your Gradle artifacts. (Default is root directory)."
    required: false
    default: "./"
runs:
  using: "composite"
  steps:
    ### Publish java artifact

    - name: Publish to Nexus
      run: |
        echo '${{ inputs.signing-secret-key-ring }}' | base64 -d > secring.gpg
        ./gradlew --info --stacktrace publishToNexus
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        SIGNING_SECRET_KEY_RING_FILE: "secring.gpg"
        SIGNING_KEY_ID: "${{ inputs.signing-key-id }}"
        SIGNING_PASSWORD: "${{ inputs.signing-password }}"
        OSSRH_USERNAME: "${{ inputs.ossrh-username }}"
        OSSRH_PASSWORD: "${{ inputs.ossrh-password }}"
        CI: true
    
    ### Publish docker image

    - name: Login to DockerHub
      if: ${{ inputs.docker-username != '' && inputs.docker-password != '' && inputs.docker-publisher != '' }}
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    - name: Download jib docker image artifact
      uses: actions/download-artifact@master
      with:
        name: ${{ inputs.docker-image-artifact-name }}
        path: build
    
    - name: Publish docker image
      if: ${{ inputs.docker-username != '' && inputs.docker-password != '' && inputs.docker-publisher != '' }}
      run: |
        docker load --input build/jib-image.tar
        docker images

        if [[ "$GITHUB_REF" =~ ^ref/tags/.* ]]; then
          echo "TAG BRANCH"
          docker tag ${{ github.event.repository.name }}:${{ github.run_id }} ${{ inputs.docker-publisher }}/${{ github.event.repository.name }}:latest
          docker tag ${{ github.event.repository.name }}:${{ github.run_id }} ${{ inputs.docker-publisher }}/${{ github.event.repository.name }}:${GITHUB_REF/refs\/tags\//}
          #docker push ${{ inputs.docker-publisher }}/${{ github.event.repository.name }}:latest
          #docker push ${{ inputs.docker-publisher }}/${{ github.event.repository.name }}:${GITHUB_REF/refs\/tags\//}
        else
          echo "OTHER BRANCH"
          docker tag ${{ github.event.repository.name }}:${{ github.run_id }} ${{ inputs.docker-publisher }}/${{ github.event.repository.name }}:${{ github.run_id }}
          #docker push ${{ inputs.docker-publisher }}/${{ github.event.repository.name }}:${{ github.run_id }}
        fi

        docker images
      shell: bash
      working-directory: ${{ inputs.working-directory }}
